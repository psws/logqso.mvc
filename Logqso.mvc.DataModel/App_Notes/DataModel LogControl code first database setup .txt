create classes in namespace
	namespace Logqso.mvc.DataModel.LogControl
{
    public class CatOperator
    {
        [Key]
        public virtual Logqso.mvc.common.Enum.CatOperator CatOpr { get; set; }
        [Column(TypeName = "varchar")]
        [MaxLength(15)]
        [Required]
        public virtual string CatOprName { get; set; }
    }
}
setup configuration string in web.config
    <add name="LogControlDB" connectionString="Data Source=PSS60\SQL2014; Initial Catalog=Contestqso; persist security info=True;user id=jims9m8r;password=jims9m8r;MultipleActiveResultSets=True;App=EntityFramework"


NOTE: Make sure your class derives from LogControlDB : DbContext
create this file in the same namespace as the model classes (Logqso.mvc.DataModel):
namespace Logqso.mvc.DataModel.LogControl
{
// https://msdn.microsoft.com/en-us/data/jj591621.aspx#model
    public class LogControlDB : DbContext
    {

        public LogControlDB()
            : base("name=LogControlDB")
        {
        }

        public DbSet<Logqso.mvc.DataModel.LogControl.CatOperator> CatOperator { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();

			protected override void OnModelCreating(DbModelBuilder modelBuilder)
			{
				modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
				base.OnModelCreating(modelBuilder);
			}
		}

	}
 
 create seed method
 the p => p.Prefix must select a non duplicasted property of the FillCountry class
 if you select  then you will get a duplicte sequence error because it cannot select which duplicate
 The prefix is unique
          context.FiltCountry.AddOrUpdate(
                p => p.Prefix,
                new FiltCountry { Prefix = "-", CountryName = "ALL " },

               new FiltCountry  { Prefix  = "LU",  CountryName ="Argentina"},
	            new FiltCountry  { Prefix  = "VP5",  CountryName ="Turks & Caicos"},
	            new FiltCountry  { Prefix  = "HI",  CountryName ="Dominican Republ"},

Then run this command in the pm
 PM> Enable-Migrations -Force -ProjectName Logqso.mvc.DataModel -StartupProjectName Logqso.mvc.ui -ContextTypeName Logqso.mvc.DataModel.LogControl.LogControlDB -MigrationsDirectory LogControl\Migrations\LogControlDB

Package Model Console output
PM> Enable-Migrations -Force -ProjectName Logqso.mvc.DataModel -StartupProjectName Logqso.mvc.ui -ContextTypeName Logqso.mvc.DataModel.LogControl.LogControlDB -MigrationsDirectory LogControl\Migrations\LogControlDB
Checking if the context targets an existing database...
Code First Migrations enabled for project Logqso.mvc.DataModel.

Next do the Add-Migration

PM> Add-Migration -ProjectName Logqso.mvc.DataModel -StartupProjectName Logqso.mvc.ui -ConfigurationTypeName Logqso.mvc.DataModel.LogControl.Migrations.LogControlDB.Configuration "InitialDatabaseCreation" 
PM> Add-Migration -ProjectName Logqso.mvc.DataModel -StartupProjectName Logqso.mvc.ui -ConfigurationTypeName Logqso.mvc.DataModel.LogControl.Migrations.LogControlDB.Configuration "FilterYaxisXaxisUpdate" 

Package Model Console output
PM> Add-Migration -ProjectName Logqso.mvc.DataModel -StartupProjectName Logqso.mvc.ui -ConfigurationTypeName Logqso.mvc.DataModel.LogControl.Migrations.LogControlDB.Configuration "InitialDatabaseCreation" 
Scaffolding migration 'InitialDatabaseCreation'.
The Designer Code for this migration file includes a snapshot of your current Code First model. This snapshot is used to calculate the changes to your model when you scaffold the next migration. If you make additional changes to your model that you want to include in this migration, then you can re-scaffold it by running 'Add-Migration InitialDatabaseCreation' again.
next create tables in DB


NEXT:
Go to generated configuration.cs model and add the Control Seed methods
        protected override void Seed(Logqso.mvc.DataModel.LogControl.LogControlDB context)
        {
            //  This method will be called after migrating to the latest version.

            //  You can use the DbSet<T>.AddOrUpdate() helper extension method 
            //  to avoid creating duplicate seed data. E.g.
            //
            //    context.People.AddOrUpdate(
            //      p => p.FullName,
            //      new Person { FullName = "Andrew Peters" },
            //      new Person { FullName = "Brice Lambson" },
            //      new Person { FullName = "Rowan Miller" }
            //    );
            //
            CategorySeeds.SeedCategory(context);
            FiltersSeeds.SeedFilters(context);
            YaxisSeeds.SeedYaxis(context);
            XAxisSeeds.SeedXaxis(context);
            DefaultSeeds.SeedDefault(context);

        }


PM>Update-Database -ProjectName Logqso.mvc.DataModel -StartupProjectName Logqso.mvc.ui -ConfigurationTypeName Logqso.mvc.DataModel.LogControl.Migrations.LogControlDB.Configuration -Verbose -ConnectionStringName "LogControlDB"

Package Model Console output
PM> Update-Database -ProjectName Logqso.mvc.DataModel -StartupProjectName Logqso.mvc.ui -ConfigurationTypeName Logqso.mvc.DataModel.LogControl.Migrations.LogControlDB.Configuration -Verbose -ConnectionStringName "LogControlDB"
Using StartUp project 'Logqso.mvc.ui'.
Specify the '-Verbose' flag to view the SQL statements being applied to the target database.
Target database is: 'Logqso' (DataSource: PSS60\SQL2014, Provider: System.Data.SqlClient, Origin: Explicit).
Applying explicit migrations: [201507270650382_InitialDatabaseCreation].
Applying explicit migration: 201507270650382_InitialDatabaseCreation.
CREATE TABLE [dbo].[CallSign] (
    [CallSignId] [int] NOT NULL IDENTITY,
    [Call] [varchar](20) NOT NULL,
    [Continent] [int] NOT NULL,
    CONSTRAINT [PK_dbo.CallSign] PRIMARY KEY ([CallSignId])
)
CREATE TABLE [dbo].[Contest] (
    [ContestId] [int] NOT NULL IDENTITY,
    [ContestName] [nvarchar](30),
    CONSTRAINT [PK_dbo.Contest] PRIMARY KEY ([ContestId])
)
CREATE TABLE [dbo].[Log] (
    [LogId] [int] NOT NULL IDENTITY,
    [ContestYear] [datetime] NOT NULL,
    [ContestId] [int] NOT NULL,
    CONSTRAINT [PK_dbo.Log] PRIMARY KEY ([LogId])
)
CREATE INDEX [IX_ContestId] ON [dbo].[Log]([ContestId])
CREATE TABLE [dbo].[Qso] (
    [QsoId] [int] NOT NULL IDENTITY,
    [LogId] [int] NOT NULL,
    [CallsignId] [int] NOT NULL,
    [QsoDateEime] [datetime] NOT NULL,
    [RxRst] [smallint] NOT NULL,
    [TxRst] [smallint] NOT NULL,
    CONSTRAINT [PK_dbo.Qso] PRIMARY KEY ([QsoId])
)
CREATE INDEX [IX_LogId] ON [dbo].[Qso]([LogId])
CREATE INDEX [IX_CallsignId] ON [dbo].[Qso]([CallsignId])
ALTER TABLE [dbo].[Log] ADD CONSTRAINT [FK_dbo.Log_dbo.Contest_ContestId] FOREIGN KEY ([ContestId]) REFERENCES [dbo].[Contest] ([ContestId]) ON DELETE CASCADE
ALTER TABLE [dbo].[Qso] ADD CONSTRAINT [FK_dbo.Qso_dbo.CallSign_CallsignId] FOREIGN KEY ([CallsignId]) REFERENCES [dbo].[CallSign] ([CallSignId]) ON DELETE CASCADE
ALTER TABLE [dbo].[Qso] ADD CONSTRAINT [FK_dbo.Qso_dbo.Log_LogId] FOREIGN KEY ([LogId]) REFERENCES [dbo].[Log] ([LogId]) ON DELETE CASCADE
CREATE TABLE [dbo].[__MigrationHistory] (
    [MigrationId] [nvarchar](150) NOT NULL,
    [ContextKey] [nvarchar](300) NOT NULL,
    [Model] [varbinary](max) NOT NULL,
    [ProductVersion] [nvarchar](32) NOT NULL,
    CONSTRAINT [PK_dbo.__MigrationHistory] PRIMARY KEY ([MigrationId], [ContextKey])
)
INSERT [dbo].[__MigrationHistory]([MigrationId], [ContextKey], [Model], [ProductVersion])
VALUES (N'201507270650382_InitialDatabaseCreation', N'Logqso.mvc.DataModel.LogData.Migrations.LogDataDB.Configuration',  0x

Running Seed method.
PM>





